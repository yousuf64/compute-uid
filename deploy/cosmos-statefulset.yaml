apiVersion: v1
kind: Service
metadata:
  name: cosmos-db
  labels:
    app: cosmos-db
spec:
  ports:
    - port: 8081
      name: web
  clusterIP: None
  selector:
    app: cosmos-db
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cosmos-db
spec:
  selector:
    matchLabels:
      app: cosmos-db
  serviceName: "cosmos-db"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: cosmos-db
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: cosmos-db
          image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
          resources:
            requests:
              memory: "2Gi"
              cpu: "0.2"
            limits:
              memory: "3Gi"
              cpu: "0.3"
          ports:
            - containerPort: 8081
              name: web
          volumeMounts:
            - name: cosmos-db-storage
              mountPath: /tmp/cosmos
          env:
            - name: AZURE_COSMOS_EMULATOR_PARTITION_COUNT
              value: "3"
            - name: AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE
              value: "true"
  volumeClaimTemplates:
    - metadata:
        name: cosmos-db-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Mi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: cosmos-db-pv
spec:
  capacity:
    storage: 100Mi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /storage/cosmos-data/
---
apiVersion: v1
kind: Service
metadata:
  name: cosmos-db-node-port
spec:
  type: NodePort
  selector:
    statefulset.kubernetes.io/pod-name: cosmos-db-0
  ports:
    - port: 8081
      targetPort: 8081
      nodePort: 30950